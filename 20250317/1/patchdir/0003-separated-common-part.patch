From 61b05d722052437a603ced034a1a5d0e33419b43 Mon Sep 17 00:00:00 2001
From: dmitry <frolov2013dm2@gmail.com>
Date: Sun, 23 Mar 2025 16:23:14 +0300
Subject: [PATCH 3/3] separated common part

---
 20250317/1/client.py | 140 +++++++++++++++++++------------------------
 20250317/1/common.py |  60 +++++++++++++++++++
 20250317/1/server.py | 128 ++++++++++++---------------------------
 3 files changed, 158 insertions(+), 170 deletions(-)
 create mode 100644 20250317/1/common.py

diff --git a/20250317/1/client.py b/20250317/1/client.py
index d950a8f..3611b53 100644
--- a/20250317/1/client.py
+++ b/20250317/1/client.py
@@ -1,25 +1,8 @@
 import socket
-import json
 import cmd
 import shlex
 import cowsay
-from io import StringIO
-
-jgsbat = cowsay.read_dot_cow(StringIO("""
-$the_cow = <<EOC;
-    ,_                    _,
-    ) '-._  ,_    _,  _.-' (
-    )  _.-'.|\\--//|.'-._  (
-     )'   .'\\/o\\/o\\/'.   `(
-      ) .' . \\====/ . '. (
-       )  / <<    >> \\  (
-        '-._/``  ``\\_.-'
-  jgs     __\\'--'//__
-         (((""`  `"")))
-EOC
-"""))
-
-cow_files = {"jgsbat": jgsbat}
+from common import cow_files, communicate
 
 class MudCmd(cmd.Cmd):
     prompt = "(MUD) "
@@ -34,91 +17,73 @@ class MudCmd(cmd.Cmd):
     def connect(self):
         try:
             self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
-            self.sock.settimeout(1.0)
             self.sock.connect(('localhost', 12345))
-        except Exception as e:
+        except Exception:
             self.sock = None
+            print("Error: Cannot connect to server")
 
-    def send_command(self, command):
-        if self.sock is None:
+    def do_move(self, direction):
+        if not self.sock:
             self.connect()
-            if self.sock is None:
-                return {"type": "error", "message": "Cannot connect to server"}
-        try:
-            self.sock.send(json.dumps(command).encode() + b"\n")
-            data = b""
-            while True:
-                try:
-                    chunk = self.sock.recv(1024)
-                    if not chunk:
-                        self.sock.close()
-                        self.sock = None
-                        return {"type": "error", "message": "Server disconnected"}
-                    data += chunk
-                    try:
-                        response = json.loads(data.decode())
-                        return response
-                    except json.JSONDecodeError:
-                        continue
-                except socket.timeout:
-                    self.sock.close()
-                    self.sock = None
-                    return {"type": "error", "message": "No response from server"}
-                except ConnectionError:
-                    self.sock.close()
-                    self.sock = None
-                    return {"type": "error", "message": "Connection error"}
-        except Exception as e:
+            if not self.sock:
+                print("Error: Cannot connect to server")
+                return
+        moves = {"up": (0, -1), "down": (0, 1), "left": (-1, 0), "right": (1, 0)}
+        if direction not in moves:
+            print("Invalid direction")
+            return
+        dx, dy = moves[direction]
+        response = communicate(self.sock, {"type": "move", "dx": dx, "dy": dy})
+        if response is None or not isinstance(response, dict) or "type" not in response:
+            print("Error: Invalid server response")
             self.sock.close()
             self.sock = None
-            return {"type": "error", "message": str(e)}
-
-    def _move(self, direction, arg):
-        if arg:
-            print("Invalid arguments")
             return
-        dx, dy = {"up": (0, -1), "down": (0, 1), "left": (-1, 0), "right": (1, 0)}[direction]
-        response = self.send_command({"type": "move", "dx": dx, "dy": dy})
         if response["type"] == "position":
             print(f"Moved to ({response['x']}, {response['y']})")
         elif response["type"] == "encounter":
-            cowfile = cow_files.get(response["name"], response["name"])
-            print(cowsay.cowsay(response["hello"], cow=cowfile))
+            print(cowsay.cowsay(response["hello"], cow=cow_files.get(response["name"], response["name"])))
         elif response["type"] == "error":
             print(f"Error: {response['message']}")
+            if "Connection" in response["message"]:
+                self.sock.close()
+                self.sock = None
 
     def do_up(self, arg):
-        self._move("up", arg)
+        self.do_move("up")
 
     def do_down(self, arg):
-        self._move("down", arg)
+        self.do_move("down")
 
     def do_left(self, arg):
-        self._move("left", arg)
+        self.do_move("left")
 
     def do_right(self, arg):
-        self._move("right", arg)
+        self.do_move("right")
 
     def do_addmon(self, arg):
+        if not self.sock:
+            self.connect()
+            if not self.sock:
+                print("Error: Cannot connect to server")
+                return
         parts = shlex.split(arg)
         if len(parts) < 6:
             print("Invalid arguments")
             return
         try:
-            name = parts[0]
+            name, params = parts[0], {}
             if name not in self.valid_monsters:
                 print("Cannot add unknown monster")
                 return
-            params = {}
             i = 1
             while i < len(parts):
-                if parts[i] in ("hello", "hp", "coords") and i + 1 < len(parts):
-                    if parts[i] == "coords" and i + 2 < len(parts):
-                        params["x"], params["y"] = int(parts[i + 1]), int(parts[i + 2])
-                        i += 3
-                    else:
-                        params[parts[i]] = parts[i + 1] if parts[i] == "hello" else int(parts[i + 1])
-                        i += 2
+                if parts[i] == "coords" and i + 2 < len(parts):
+                    params["x"], params["y"] = int(parts[i + 1]), int(parts[i + 2])
+                    i += 3
+                elif parts[i] in ("hello", "hp") and i + 1 < len(parts):
+                    params[parts[i]] = parts[i + 1] if parts[i] == "hello" else int(parts[i + 1])
+                    i += 2
                 else:
                     print("Invalid arguments")
                     return
@@ -131,20 +96,24 @@ class MudCmd(cmd.Cmd):
             if not (0 <= params["x"] <= 9 and 0 <= params["y"] <= 9):
                 print("Coordinates out of bounds")
                 return
-            response = self.send_command({
-                "type": "addmon",
-                "x": params["x"],
-                "y": params["y"],
-                "name": name,
-                "hello": params["hello"],
-                "hp": params["hp"]
+            response = communicate(self.sock, {
+                "type": "addmon", "x": params["x"], "y": params["y"],
+                "name": name, "hello": params["hello"], "hp": params["hp"]
             })
+            if response is None or not isinstance(response, dict) or "type" not in response:
+                print("Error: Invalid server response")
+                self.sock.close()
+                self.sock = None
+                return
             if response["type"] == "added_monster":
                 print(f"Added monster {name} to ({params['x']}, {params['y']}) saying {params['hello']}")
                 if response.get("replaced", False):
                     print("Replaced the old monster")
             elif response["type"] == "error":
                 print(f"Error: {response['message']}")
+                if "Connection" in response["message"]:
+                    self.sock.close()
+                    self.sock = None
         except ValueError:
             print("Invalid arguments")
 
@@ -157,6 +126,11 @@ class MudCmd(cmd.Cmd):
         return [kw for kw in keywords if kw not in used and kw.startswith(text)]
 
     def do_attack(self, arg):
+        if not self.sock:
+            self.connect()
+            if not self.sock:
+                print("Error: Cannot connect to server")
+                return
         parts = shlex.split(arg)
         if len(parts) < 1 or len(parts) > 3 or (len(parts) == 3 and parts[1] != "with"):
             print("Invalid arguments")
@@ -166,7 +140,12 @@ class MudCmd(cmd.Cmd):
         if weapon not in self.weapons:
             print("Unknown weapon")
             return
-        response = self.send_command({"type": "attack", "name": monster_name, "damage": self.weapons[weapon]})
+        response = communicate(self.sock, {"type": "attack", "name": monster_name, "damage": self.weapons[weapon]})
+        if response is None or not isinstance(response, dict) or "type" not in response:
+            print("Error: Invalid server response")
+            self.sock.close()
+            self.sock = None
+            return
         if response["type"] == "attack_result":
             if not response["success"]:
                 print(f"No {monster_name} here")
@@ -178,6 +157,9 @@ class MudCmd(cmd.Cmd):
                     print(f"{monster_name} now has {response['remaining_hp']}")
         elif response["type"] == "error":
             print(f"Error: {response['message']}")
+            if "Connection" in response["message"]:
+                self.sock.close()
+                self.sock = None
 
     def complete_attack(self, text, line, begidx, endidx):
         args = shlex.split(line[:begidx])
diff --git a/20250317/1/common.py b/20250317/1/common.py
new file mode 100644
index 0000000..87c7446
--- /dev/null
+++ b/20250317/1/common.py
@@ -0,0 +1,60 @@
+import socket
+import json
+from io import StringIO
+import cowsay
+
+jgsbat = cowsay.read_dot_cow(StringIO("""
+$the_cow = <<EOC;
+    ,_                    _,
+    ) '-._  ,_    _,  _.-' (
+    )  _.-'.|\\--//|.'-._  (
+     )'   .'\\/o\\/o\\/'.   `(
+      ) .' . \\====/ . '. (
+       )  / <<    >> \\  (
+        '-._/``  ``\\_.-'
+  jgs     __\\'--'//__
+         (((""`  `"")))
+EOC
+"""))
+
+cow_files = {"jgsbat": jgsbat}
+
+class Person:
+    def __init__(self, x, y):
+        self.x = x
+        self.y = y
+
+    def get_position(self):
+        return (self.x, self.y)
+
+class Monster(Person):
+    def __init__(self, x, y, name, hello, hitpoints):
+        super().__init__(x, y)
+        self.name = name
+        self.hello = hello
+        self.hitpoints = hitpoints
+
+class Gamer(Person):
+    def __init__(self, x, y):
+        super().__init__(x, y)
+
+    def move(self, dx, dy):
+        self.x = (self.x + dx) % 10
+        self.y = (self.y + dy) % 10
+
+def communicate(sock, command=None):
+    try:
+        if command is not None:
+            sock.send(json.dumps(command).encode() + b"\n")
+        data = b""
+        while True:
+            chunk = sock.recv(1024)
+            if not chunk:
+                return {"type": "error", "message": "Connection closed"}
+            data += chunk
+            try:
+                return json.loads(data.decode())
+            except json.JSONDecodeError:
+                continue
+    except Exception as e:
+        return {"type": "error", "message": str(e)}
\ No newline at end of file
diff --git a/20250317/1/server.py b/20250317/1/server.py
index 11ea3c2..f7bcadf 100644
--- a/20250317/1/server.py
+++ b/20250317/1/server.py
@@ -1,44 +1,7 @@
 import socket
 import json
 import cowsay
-from io import StringIO
-
-jgsbat = cowsay.read_dot_cow(StringIO("""
-$the_cow = <<EOC;
-    ,_                    _,
-    ) '-._  ,_    _,  _.-' (
-    )  _.-'.|\\--//|.'-._  (
-     )'   .'\\/o\\/o\\/'.   `(
-      ) .' . \\====/ . '. (
-       )  / <<    >> \\  (
-        '-._/``  ``\\_.-'
-  jgs     __\\'--'//__
-         (((""`  `"")))
-EOC
-"""))
-
-class Person:
-    def __init__(self, x, y):
-        self.x = x
-        self.y = y
-
-    def get_position(self):
-        return (self.x, self.y)
-
-class Monster(Person):
-    def __init__(self, x, y, name, hello, hitpoints):
-        super().__init__(x, y)
-        self.name = name
-        self.hello = hello
-        self.hitpoints = hitpoints
-
-class Gamer(Person):
-    def __init__(self, x, y):
-        super().__init__(x, y)
-
-    def move(self, dx, dy):
-        self.x = (self.x + dx) % 10
-        self.y = (self.y + dy) % 10
+from common import Monster, Gamer, communicate
 
 class Game:
     def __init__(self):
@@ -64,59 +27,44 @@ class Game:
             del self.field[pos]
         return True, actual_damage, remaining_hp
 
+def handle_move(game, command):
+    dx, dy = command["dx"], command["dy"]
+    game.player.move(dx, dy)
+    x, y = game.player.get_position()
+    response = {"type": "position", "x": x, "y": y}
+    if (x, y) in game.field:
+        monster = game.field[(x, y)]
+        response = {"type": "encounter", "name": monster.name, "hello": monster.hello}
+    return response
+
+def handle_addmon(game, command):
+    x, y, name, hello, hp = command["x"], command["y"], command["name"], command["hello"], command["hp"]
+    replaced = game.add_monster(x, y, name, hello, hp)
+    return {"type": "added_monster", "x": x, "y": y, "name": name, "replaced": replaced}
+
+def handle_attack(game, command):
+    name, damage = command["name"], command["damage"]
+    success, damage_dealt, remaining_hp = game.attack_monster(name, damage)
+    return {"type": "attack_result", "success": success, "damage": damage_dealt, "remaining_hp": remaining_hp}
+
+COMMAND_HANDLERS = {
+    "move": handle_move,
+    "addmon": handle_addmon,
+    "attack": handle_attack
+}
+
 def handle_client(conn, addr, game):
     print(f"Client connected: {addr}")
-    conn.settimeout(1.0)
     while True:
-        try:
-            data = b""
-            while True:
-                try:
-                    chunk = conn.recv(1024)
-                    if not chunk:
-                        print(f"Client disconnected: {addr}")
-                        return
-                    data += chunk
-                    try:
-                        command = json.loads(data.decode())
-                        break
-                    except json.JSONDecodeError:
-                        continue
-                except socket.timeout:
-                    continue
-                except ConnectionError:
-                    print(f"Client disconnected: {addr}")
-                    return
-            cmd_type = command["type"]
-            response = {}
-
-            if cmd_type == "move":
-                dx, dy = command["dx"], command["dy"]
-                game.player.move(dx, dy)
-                x, y = game.player.get_position()
-                response = {"type": "position", "x": x, "y": y}
-                if (x, y) in game.field:
-                    monster = game.field[(x, y)]
-                    response = {"type": "encounter", "name": monster.name, "hello": monster.hello}
-
-            elif cmd_type == "addmon":
-                x, y, name, hello, hp = command["x"], command["y"], command["name"], command["hello"], command["hp"]
-                replaced = game.add_monster(x, y, name, hello, hp)
-                response = {"type": "added_monster", "x": x, "y": y, "name": name, "replaced": replaced}
-
-            elif cmd_type == "attack":
-                name, damage = command["name"], command["damage"]
-                success, damage_dealt, remaining_hp = game.attack_monster(name, damage)
-                response = {"type": "attack_result", "success": success, "damage": damage_dealt, "remaining_hp": remaining_hp}
-
-            else:
-                response = {"type": "error", "message": "Unknown command"}
-
-            conn.send(json.dumps(response).encode() + b"\n")
-        except Exception as e:
+        command = communicate(conn)
+        if command["type"] == "error":
             print(f"Client disconnected: {addr}")
             break
+        handler = COMMAND_HANDLERS.get(command["type"], lambda g, c: {"type": "error", "message": "Unknown command"})
+        response = handler(game, command)
+        conn.send(json.dumps(response).encode() + b"\n")
     conn.close()
+    print(f"Client disconnected: {addr}")
 
 def main():
     game = Game()
@@ -127,12 +75,10 @@ def main():
         server.listen(1)
         print("Server started on localhost:12345")
         while True:
-            try:
-                conn, addr = server.accept()
-                handle_client(conn, addr, game)
-            except KeyboardInterrupt:
-                print("Shutting down server")
-                break
+            conn, addr = server.accept()
+            handle_client(conn, addr, game)
+    except KeyboardInterrupt:
+        print("Shutting down server")
     finally:
         server.close()
 
-- 
2.43.0

